
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #R CMD BATCH --no-save plotROC.R
> 
> rocFS      <-read.table("ROC_data_fracSeqs.dat",          header = T, sep = "\t")
> rocSB      <-read.table("ROC_data_sumBits.dat",           header = T, sep = "\t")
> rocWB      <-read.table("ROC_data_weightedSumBits.dat",   header = T, sep = "\t")
> rocSSSB    <-read.table("ROC_data_single_seq_sumBits.dat",header = T, sep = "\t")
> 
> #METRIC	TP	TN	FP	FN	MCC	SENS	SPEC	PPV	NPV	ACC	FDR
> #fracSeqs
> #sumBits
> #weightedSumBits
> 
> ########
> 
> pdf(file="ROC_accuracy.pdf", width=20, height=20)
> op<-par(mfrow=c(2,2),cex=3.0)
> plot(rocFS$SPEC, rocFS$SENS, col="red", lwd=8, type="l",ylim=c(0,1),xlim=c(0,1),xlab="Specificity",ylab="Sensitivity",main="ROC plot")      
> lines(rocSB$SPEC, rocSB$SENS, col="blue",lwd=8)
> lines(rocWB$SPEC, rocWB$SENS, col="purple",lwd=8)
> lines(rocSSSB$SPEC, rocSSSB$SENS, col="cyan",lwd=8)
> points(rocFS$SPEC[rocFS$MCC==max(rocFS$MCC)], rocFS$SENS[rocFS$MCC==max(rocFS$MCC)], col="red",pch="x",lwd=12)
> points(rocSB$SPEC[rocSB$MCC==max(rocSB$MCC)], rocSB$SENS[rocSB$MCC==max(rocSB$MCC)], col="blue",pch="x",lwd=12)
> points(rocWB$SPEC[rocWB$MCC==max(rocWB$MCC)], rocWB$SENS[rocWB$MCC==max(rocWB$MCC)], col="purple",pch="x",lwd=12)
> points(rocSSSB$SPEC[rocSSSB$MCC==max(rocSSSB$MCC)], rocSSSB$SENS[rocSSSB$MCC==max(rocSSSB$MCC)], col="cyan",pch="x",lwd=12)
Warning messages:
1: In max(rocSSSB$MCC) : no non-missing arguments to max; returning -Inf
2: In max(rocSSSB$MCC) : no non-missing arguments to max; returning -Inf
> #legend("bottomleft",c("fraction seqs.","sum bits", "weighted sum bits", "single-sequence sum bits"),col=c("red","blue","purple", "cyan"),lwd=8,cex=0.7,ncol=1)
> 
> plot(rocFS$ACC, rocFS$FDR, col="red", lwd=8, type="l",ylim=c(0.2,1),xlim=c(0.2,1),xlab="ACC",ylab="FDR",main="ROC-like plot")      
> lines(rocSB$ACC, rocSB$FDR, col="blue",lwd=8)
> lines(rocWB$ACC, rocWB$FDR, col="purple",lwd=8)
> lines(rocSSSB$ACC, rocSSSB$FDR, col="cyan",lwd=8)
> points(rocFS$ACC[rocFS$MCC==max(rocFS$MCC)], rocFS$FDR[rocFS$MCC==max(rocFS$MCC)], col="red",pch="x",lwd=12)
> points(rocSB$ACC[rocSB$MCC==max(rocSB$MCC)], rocSB$FDR[rocSB$MCC==max(rocSB$MCC)], col="blue",pch="x",lwd=12)
> points(rocWB$ACC[rocWB$MCC==max(rocWB$MCC)], rocWB$FDR[rocWB$MCC==max(rocWB$MCC)], col="purple",pch="x",lwd=12)
> points(rocSSSB$ACC[rocSSSB$MCC==max(rocSSSB$MCC)], rocSSSB$FDR[rocSSSB$MCC==max(rocSSSB$MCC)], col="cyan",pch="x",lwd=12)
Warning messages:
1: In max(rocSSSB$MCC) : no non-missing arguments to max; returning -Inf
2: In max(rocSSSB$MCC) : no non-missing arguments to max; returning -Inf
> legend("bottomleft",c("fraction seqs.","sum bits", "weighted sum bits", "single-sequence sum bits"),col=c("red","blue","purple", "cyan"),lwd=8,cex=0.7,ncol=1)
> 
> plot(rocFS$fracSeqs/max(rocFS$fracSeqs), rocFS$MCC, col="red", lwd=8, type="l",ylim=c(0,max(rocSB$MCC)),xlim=c(0,1),xlab="threshold",ylab="MCC",main="MCC vs threshold")      
> lines(rocSB$sumBits/max(rocSB$sumBits), rocSB$MCC, col="blue",lwd=8)
> lines(rocWB$weightedSumBits/max(rocWB$weightedSumBits), rocWB$MCC, col="purple",lwd=8)
> lines(rocSSSB$sngl_seq_sumBits/max(rocSSSB$sngl_seq_sumBits), rocSSSB$MCC, col="cyan",lwd=8)
Warning message:
In max(rocSSSB$sngl_seq_sumBits) :
  no non-missing arguments to max; returning -Inf
> #legend("topright",c("fraction seqs.","sum bits", "weighted sum bits", "single-sequence sum bits"),col=c("red","blue","purple","cyan"),lwd=8,cex=0.7,ncol=1)
> 
> plot(rocFS$fracSeqs/max(rocFS$fracSeqs), rocFS$FDR, col="red", lwd=8, type="l",ylim=c(0,1),xlim=c(0,1),xlab="threshold",ylab="FDR",main="FDR plot")      
> lines(rocSB$sumBits/max(rocSB$sumBits), rocSB$FDR, col="blue",lwd=8)
> lines(rocWB$weightedSumBits/max(rocWB$weightedSumBits), rocWB$FDR, col="purple",lwd=8)
> lines(rocSSSB$sngl_seq_sumBits/max(rocSSSB$sngl_seq_sumBits), rocSSSB$FDR, col="cyan",lwd=8)
Warning message:
In max(rocSSSB$sngl_seq_sumBits) :
  no non-missing arguments to max; returning -Inf
> #legend("topright",c("fraction seqs.","sum bits", "weighted sum bits", "single-sequence sum bits"),col=c("red","blue","purple","cyan"),lwd=8,cex=0.7,ncol=1)
> dev.off()
null device 
          1 
> 
> ########
> 
> pdf(file="ROC.pdf", width=20, height=20)
> op<-par(mfrow=c(1,1),cex=5.0)
> plot(rocSB$SPEC, rocSB$SENS, col="blue", lwd=12, type="l",ylim=c(0,1),xlim=c(0,1),xlab="Specificity",ylab="Sensitivity",main="ROC plot")      
> #lines(rocSB$SPEC, rocSB$SENS, col="blue",lwd=12)
> #lines(rocWB$SPEC, rocWB$SENS, col="purple",lwd=12)
> lines(rocSSSB$SPEC, rocSSSB$SENS, col="red",lwd=8)
> #points(rocFS$SPEC[rocFS$MCC==max(rocFS$MCC)], rocFS$SENS[rocFS$MCC==max(rocFS$MCC)], col="red",   pch="x",lwd=16)
> points(rocSB$SPEC[rocSB$MCC==max(rocSB$MCC)], rocSB$SENS[rocSB$MCC==max(rocSB$MCC)], col="blue",  pch="x",lwd=16)
> #points(rocWB$SPEC[rocWB$MCC==max(rocWB$MCC)], rocWB$SENS[rocWB$MCC==max(rocWB$MCC)], col="purple",pch="x",lwd=16)
> points(rocSSSB$SPEC[rocSSSB$MCC==max(rocSSSB$MCC)], rocSSSB$SENS[rocSSSB$MCC==max(rocSSSB$MCC)], col="red",pch="x",lwd=12)
Warning messages:
1: In max(rocSSSB$MCC) : no non-missing arguments to max; returning -Inf
2: In max(rocSSSB$MCC) : no non-missing arguments to max; returning -Inf
> legend("bottomleft",c("alignment sum-bits", "sequence sum bits"),col=c("blue","red"),lwd=12,cex=0.7,ncol=1)
> dev.off()
null device 
          1 
> 
> ########
> 
> pdf(file="ROC_thresh.pdf", width=20, height=20)
> op<-par(mfrow=c(1,1),cex=5.0)
> #plot(rocSB$sumBits/max(rocSB$sumBits), rocSB$MCC,                 col="blue",lwd=12, type="l",ylim=c(0,max(rocSB$MCC)),xlim=c(0,1),xlab="threshold",ylab="MCC",main="MCC vs threshold")      
> plot(rocSB$sumBits, rocSB$MCC,                 col="blue",lwd=12, type="l",ylim=c(0,max(rocSB$MCC)),xlim=c(0,1000),xlab="threshold (bits)",ylab="MCC",main="MCC vs threshold")      
> #lines(rocSB$sumBits/max(rocSB$sumBits), rocSB$MCC,                 col="blue",lwd=12)
> #lines(rocWB$weightedSumBits/max(rocWB$weightedSumBits), rocWB$MCC, col="purple",lwd=12)
> #lines(rocSSSB$sngl_seq_sumBits/max(rocSSSB$sngl_seq_sumBits), rocSSSB$MCC, col="red",lwd=8)
> lines(rocSSSB$sngl_seq_sumBits, rocSSSB$MCC, col="red",lwd=8)
> legend("topright",c("alignment sum bits", "sequence sum bits"),col=c("blue","red"),lwd=12,cex=0.7,ncol=1)
> dev.off()
null device 
          1 
> 
> ######################################################################
> #benchmark2:
> #cat ROC_benchmark2.dat | cut -f 13 | sort -d | uniq | awk '{print "\42"$1"\42,"}'
> motif<-c(
+ "ANYA",
+ "AUF1_binding",
+ "C-loop",
+ "CRC_binding",
+ "CsrA_binding",
+ "CUYG",
+ "docking_elbow",
+ "Domain-V",
+ "GNRA",
+ "HuR_binding",
+ "k-turn-1",
+ "k-turn-2",
+ "pK-turn",
+ "RBS_B_subtilis",
+ "RBS_E_coli",
+ "RBS_H_pylori",
+ "right_angle-2",
+ "right_angle-3",
+ "Roquin_binding",
+ "sarcin-ricin-1",
+ "sarcin-ricin-2",
+ "SRP_S_domain",
+ "tandem-GA",
+ "Terminator1",
+ "Terminator2",
+ "T-loop",
+ "TRIT",
+ "twist_up",
+ "UAA_GAN",
+ "UMAC",
+ "UNCG",
+ "U-turn",
+ "vapC_target",
+ "VTS1_binding"
+ );
> rocB2      <-read.table("ROC_benchmark2.dat",          header = T, sep = "\t")
> 
> pdf(file="ROC_benchmark2.pdf", width=20, height=20)
> op<-par(mfrow=c(1,1),cex=5.0)
> plot(c(1,0), c(0,1), col="black",lwd=12, type="l",ylim=c(0,1),xlim=c(0,1),xlab="Specificity",ylab="Sensitivity",main="ROC curve: benchmark2")      
> for(i in 1:length(motif)){
+       lines(rocB2$SPEC[rocB2$motif==motif[i]], rocB2$SENS[rocB2$motif==motif[i]], lty=i, col=i, lwd=12)
+ }
> legend("bottomleft", motif, col=1:length(motif), lty=1:length(motif), cex=0.3, ncol=3)
> dev.off()
null device 
          1 
> 
> 
> proc.time()
   user  system elapsed 
  9.296   0.084   9.420 
